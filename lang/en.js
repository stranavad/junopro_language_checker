import billing from './en/billing';
import global from './en/global';
import project from './en/project';
import issue from './en/issue';
import design from './en/design';
import docs from './en/docs';
import test from './en/test';
import roadmap from './en/roadmap';
import navbar from './en/navbar';
import sidebar from './en/sidebar';
import dashboard from './en/dashboard';
import projectSetting from './en/projectSetting';
import teams from './en/teams';
import report from './en/report';
import integration from './en/integration';
import rightMenuSettings from './en/rightMenuSettings';
import timesheet from './en/timesheet';
import junofilter from './en/junofilter';
import broadcast from './en/broadcast';
import label from './en/label';
import settings from './en/settings';
import roles from './en/roles';
import users from './en/users';
import auth from './en/auth';

export default {
  ...global,
  ...project,
  ...issue,
  ...design,
  ...docs,
  ...test,
  ...roadmap,
  ...navbar,
  ...sidebar,
  ...dashboard,
  ...projectSetting,
  ...teams,
  ...report,
  ...integration,
  ...rightMenuSettings,
  ...billing,
  ...timesheet,
  ...junofilter,
  ...broadcast,
  ...label,
  ...settings,
  ...roles,
  ...users,
  ...auth,
  route: {
    dashboard: 'Dashboard',
    archived: 'Archived',
    schedule: 'Roadmap',
    roadmaps: 'Roadmap',
    design: 'Design',
    test: 'Test',
    issues: 'Issues',
    settings: 'Settings',
    epic: 'Epic',
    projects: 'Projects',
    project: 'Project',
    projects_open: 'Projects - Open',
    open: 'Open',
    projects_closed: 'Projects - Closed',
    closed: 'Closed',
    projects_archived: 'Projects - Archived',
    mapp: 'Mapp',
    timesheet: 'Timesheet',
    docs: 'Docs',
    automat: 'Automat',
    log: 'Log',
    reports: 'Reports',
    operation_log: 'Operation Log',
    introduction: 'Introduction',
    documentation: 'Documentation',
    teams: 'Teams',
    mailer: 'Mailer',
    general: 'General',
    billing: 'Billing',
    guide: 'Guide',
    permission: 'Permission',
    pagePermission: 'Page Permission',
    rolePermission: 'Role Permission',
    directivePermission: 'Directives',
    icons: 'Icons',
    components: 'Components',
    componentIndex: 'Introduction',
    tinymce: 'Tinymce',
    markdown: 'Markdown',
    jsonEditor: 'JSON Editor',
    dndList: 'Dnd List',
    splitPane: 'SplitPane',
    avatarUpload: 'Avatar Upload',
    dropzone: 'Dropzone',
    sticky: 'Sticky',
    countTo: 'CountTo',
    componentMixin: 'Mixin',
    backToTop: 'BackToTop',
    dragDialog: 'Drag Dialog',
    dragSelect: 'Drag Select',
    dragKanban: 'Drag Kanban',
    charts: 'Charts',
    keyboardChart: 'Keyboard Chart',
    lineChart: 'Line Chart',
    mixChart: 'Mix Chart',
    example: 'Example',
    nested: 'Nested Routes',
    menu1: 'Menu 1',
    'menu1-1': 'Menu 1-1',
    'menu1-2': 'Menu 1-2',
    'menu1-2-1': 'Menu 1-2-1',
    'menu1-2-2': 'Menu 1-2-2',
    'menu1-3': 'Menu 1-3',
    menu2: 'Menu 2',
    table: 'Table',
    dynamicTable: 'Dynamic Table',
    dragTable: 'Drag Table',
    inlineEditTable: 'Inline Edit',
    complexTable: 'Complex Table',
    treeTable: 'Tree Table',
    customTreeTable: 'Custom TreeTable',
    tab: 'Tab',
    form: 'Form',
    createArticle: 'Create Article',
    editArticle: 'Edit Article',
    articleList: 'Articles',
    errorPages: 'Error Pages',
    page401: '401',
    page404: '404',
    errorLog: 'Error Log',
    excel: 'Excel',
    exportExcel: 'Export Excel',
    selectExcel: 'Export Selected',
    mergeHeader: 'Merge Header',
    uploadExcel: 'Upload Excel',
    zip: 'Zip',
    pdf: 'PDF',
    exportZip: 'Export Zip',
    theme: 'Theme',
    clipboardDemo: 'Clipboard',
    i18n: 'I18n',
    externalLink: 'External Link',
    elementUi: 'Element UI',
    administrator: 'Administrator',
    users: 'Users',
    userProfile: 'User Profile',
  },
  login: {
    title: 'Login Form',
    logIn: 'Log in',
    username: 'Username',
    password: 'Password',
    any: 'any',
    thirdparty: 'Or connect with',
    thirdpartyTips:
      'Can not be simulated on local, so please combine you own business simulation! ! !',
    email: 'Email',
  },
  documentation: {
    documentation: 'Documentation',
    laravel: 'Laravel',
    github: 'Github Repository',
  },
  permission: {
    addRole: 'New Role',
    editPermission: 'Edit Permission',
    roles: 'Your roles',
    switchRoles: 'Switch roles',
    tips: 'In some cases it is not suitable to use v-role/v-permission, such as element Tab component or el-table-column and other asynchronous rendering dom cases which can only be achieved by manually setting the v-if with checkRole or/and checkPermission.',
    delete: 'Delete',
    confirm: 'confirm',
    Confirm: 'Confirm',
    cancel: 'cancel',
    Cancel: 'Cancel',
  },
  guide: {
    description:
      'The guide page is useful for some people who entered the project for the first time. You can briefly introduce the features of the project. Demo is based on ',
    button: 'Show Guide',
  },
  components: {
    documentation: 'Documentation',
    tinymceTips:
      'Rich text editor is a core part of management system, but at the same time is a place with lots of problems. In the process of selecting rich texts, I also walked a lot of detours. The common rich text editors in the market are basically used, and the finally chose Tinymce. See documentation for more detailed rich text editor comparisons and introductions.',
    dropzoneTips:
      'Because my business has special needs, and has to upload images to qiniu, so instead of a third party, I chose encapsulate it by myself. It is very simple, you can see the detail code in @/components/Dropzone.',
    stickyTips:
      'when the page is scrolled to the preset position will be sticky on the top.',
    backToTopTips1:
      'When the page is scrolled to the specified position, the Back to Top button appears in the lower right corner',
    backToTopTips2:
      'You can customize the style of the button, show / hide, height of appearance, height of the return. If you need a text prompt, you can use element-ui el-tooltip elements externally',
    imageUploadTips:
      'Since I was using only the vue@1 version, and it is not compatible with mockjs at the moment, I modified it myself, and if you are going to use it, it is better to use official version.',
  },
  table: {
    description: 'Description',
    dynamicTips1: 'Fixed header, sorted by header order',
    dynamicTips2: 'Not fixed header, sorted by click order',
    dragTips1: 'The default order',
    dragTips2: 'The after dragging order',
    name: 'Name',
    title: 'Title',
    importance: 'Imp',
    type: 'Type',
    remark: 'Remark',
    search: 'Search',
    add: 'Add',
    export: 'Export',
    reviewer: 'reviewer',
    id: 'ID',
    ID: 'ID',
    date: 'Date',
    author: 'Author',
    readings: 'Readings',
    status: 'Status',
    actions: 'actions',
    Actions: 'Actions',
    Edit: 'Edit',
    Ok: 'OK',
    publish: 'Publish',
    draft: 'Draft',
    delete: 'delete',
    Delete: 'Delete',
    Archive: 'Archive',
    Lock: 'Lock',
    Role: 'Role',
    Unlock: 'Unlock',
    Restore: 'Restore',
    cancel: 'cancel',
    Cancel: 'Cancel',
    Change: 'Change',
    confirm: 'confirm',
    Confirm: 'Confirm',
    CreateNewUser: 'Create New User',
    PleaseSelectRole: 'Please select role',
    keyword: 'Keyword',
    role: 'Role',
    Name: 'Name',
    Title: 'Title',
    Value: 'Value',
    LastUpdate: 'Last Update',
    Show: 'Show',
  },
  errorLog: {
    tips: 'Please click the bug icon in the upper right corner',
    description:
      'Now the management system are basically the form of the spa, it enhances the user experience, but it also increases the possibility of page problems, a small negligence may lead to the entire page deadlock. Fortunately Vue provides a way to catch handling exceptions, where you can handle errors or report exceptions.',
    documentation: 'Document introduction',
  },
  excel: {
    export: 'Export',
    selectedExport: 'Export Selected Items',
    placeholder: 'Please enter the file name(default excel-list)',
  },
  zip: {
    export: 'Export',
    placeholder: 'Please enter the file name(default file)',
  },
  pdf: {
    tips: 'Here we use window.print() to implement the feature of downloading pdf.',
  },
  theme: {
    change: 'Change Theme',
    documentation: 'Theme documentation',
    tips: 'Tips: It is different from the theme-pick on the navbar is two different skinning methods, each with different application scenarios. Refer to the documentation for details.',
  },
  user: {
    Role: 'Role',
    Password: 'Password',
    ConfirmPassword: 'Confirm password',
    Name: 'Name',
    Nickname: 'Nickname',
    FirstName: 'First Name',
    LastName: 'Last Name',
    Email: 'Email',
    Phone: 'Phone',
    Status: 'Status',
    locked: 'locked',
    archived: 'archived',
    deleted: 'deleted',
    active: 'active',
    EditUser: 'Edit User',
  },
  actions: {
    OK: 'OK',
    Edit: 'Edit',
    Delete: 'Delete',
    Deleting: 'Deleting',
    Cancel: 'Cancel',
    Continue: 'Continue',
    Confirm: 'Confirm',
    Create: 'Create',
    Update: 'Update',
    Reset: 'Reset',
    Saving: 'Saving',
    Restore: 'Restore',
    Restoring: 'Restoring',
  },
  role: {
    name: 'Name',
    CreateRole: 'Create Role',
    CreateNewRole: 'Create New Role',
    EditPermissions: 'Edit Permissions',
    MenuPermissions: 'Menu Permissions',
    SpecificPermissions: 'Specific Permissions',
    Menu: 'Menu',
    Special: 'Special',
    Project: 'Project',
    message: {
      ThisWillPermanentlyDeleteRole: 'This will permanently delete role',
      RoleHasBeenUpdatedSuccessfully: 'Role has been updated successfully',
    },
  },
  message: {
    UpdateCanceled: 'Update Canceled',
    DeleteCanceled: 'Delete Canceled',
    DeleteCompleted: 'Delete Completed',
    AddCompleted: 'Add Completed',
    AddFailed: 'Add Failed',
    RemoveCompleted: 'Remove Completed',
    RemoveFailed: 'Remove Failed',
  },
  form: {
    title: {
      EditRole: 'Edit Role',
      EditUser: 'Edit User',
      EditBug: 'Edit Bug',
      EditTask: 'Edit Task',
      EditProject: 'Edit Project',
      EditStory: 'Edit Story',
      EditEpic: 'Edit Epic',
      EditTeam: 'Edit Team',
      AddNewStory: 'Add New Story',
      AddNewRole: 'Add New Role',
      AddNewUser: 'Add New User',
      AddNewEpic: 'Add New Epic',
      AddNewBug: 'Add New Bug',
      AddNewProject: 'Add New Project',
      AddNewTask: 'Add New Task',
      AddNewTeam: 'Add New Team',
    },
  },
  privilege: {
    module: {
      Activity: 'Activity',
      Dashboard: 'Dashboard',
      Schedule: 'Roadmap',
      ScheduleSubItem: 'Roadmap Activity',
      DesignEpic: 'Design',
      Project: 'Project',
      TestPlan: 'Test / Test  Plan',
      TestCase: 'Test / Test  Case',
      TestSpace: 'Test / Test Space',
      Issue: 'Issue',
      Priority: 'Priority',
      Workflow: 'Workflow',
      Mapp: 'Mapp',
      Timesheet: 'Timesheet',

      Settings: 'Settings',
      Docs: 'Space',
      DocsTopics: 'Topics',
      DocsPages: 'Pages',
      Automat: 'Automat',
      MenuProjects: 'Menu: Projects',
      MenuMapp: 'Menu: Mapp',
      MenuAutomat: 'Menu: Automat',
      MenuTimesheet: 'Menu: Timesheet',
      MenuDocs: 'Menu: Docs',
      MenuLogs: 'Menu: Operation Logs',
      MenuSettings: 'Menu: Settings',
      settBilling: 'Billing',
      settMailer: 'Mailer',
      settGeneral: 'General',
      settUsers: 'Users',
      settTeams: 'Teams',
      settRoles: 'Roles',
      settNotifications: 'Notifications',
      settBroadcastMessages: 'Broadcast Messages',
      settIntegrations: 'Integrations',
      MenuDashboard: 'Menu: Dashboard',
      MenuReports: 'Menu: Reports',
      MenuSupport: 'Menu: Support',
      ManageUser: 'Manage User',
      ManagePermissions: 'Manage Permissions',
    },
  },
  notification: {
    issue: {
      assignee:
        '<p style="word-break: initial;">{imageAssigner}{assigner} assigned <span class="text-juno-blue text-lowercase">{entityType} #{entityId}</span> "{entityName}" at <span class="text-juno-blue cursor-pointer" @click="openProjectForm()">{projectName}</span> to {assignee}.</p>',
    },
    design: {
      assignee:
        '<p style="word-break: initial;">{imageAssigner}{assigner} assigned <span class="text-juno-blue text-lowercase">{entityType} #{entityId}</span> "{entityName}" at <span class="text-juno-blue cursor-pointer" @click="openProjectForm()">{projectName}</span> to {assignee}.</p>',
    },
    test: {
      assignee:
        '<p style="word-break: initial;">{imageAssigner}{assigner} assigned <span class="text-juno-blue text-lowercase">{entityType} #{entityId}</span> "{entityName}" at <span class="text-juno-blue cursor-pointer" @click="openProjectForm()">{projectName}</span> to {assignee}.</p>',
    },
    schedule: {
      assignee:
        '<p style="word-break: initial;">{imageAssigner}{assigner} assigned <span class="text-juno-blue text-lowercase">{entityType} activity #{entityId}</span> "{entityName}" at <span class="text-juno-blue cursor-pointer" @click="openProjectForm()">{projectName}</span> to {assignee}.</p>',
    },
  },
  notifications: {
    form_copied: 'The form has been successfully copied to a clipboard!',
    form_not_copied: "The form couln't be copied to a clipboard!",
    epic: {
      store: 'Epic - {epicName} has been successfully created!',
      update: 'Epic - {epicName} has been successfully updated!',
      change: 'Epic - {epicName} has been successfully transformed to story!',
      changeAuthor:
        '{userName} was set as project author of Epic - {epicName}!',
      changeOwner: '{userName} was set as project owner of Epic - {epicName}!',
      updateSpent: '{newSpent} was reported in Epic - {designName}',
      comment: {
        store: 'Comment was successfully added to {taskName}!',
        update: 'Comment was successfully updated!',
      },
    },
    label: {
      create: 'Label  {labelName} has been successfully created!',
    },
    story: {
      store: 'Story - {storyName} has been successfully created!',
      update: 'Story - {storyName} has been successfully updated!',
      change: 'Story - {storyName} has been successfully transformed to epic!',
      updateSpent: '{newSpent} was reported in Story - {designName}',
      changeAuthor:
        '{userName} was set as project author of Story - {storyName}!',
      changeOwner:
        '{userName} was set as project owner of Story - {storyName}!',
      updateLabels: '{storyName} labels have been successfully updated!',
      comment: {
        store: 'Comment was successfully added to {designName}!',
        update: 'Comment was successfully updated!',
      },
    },
    timesheet: {
      store: 'Record was successfully created!',
      updateActivity: 'Record type was successfully updated!',
      updateDescription: 'Record description was successfully updated!',
      updateTime: 'Records time was successfully updated!',
      delete: 'Record was successfully deleted!',
    },
    report: {
      delete: 'Report was successfully deleted!',
      restore: 'Report was successfully restored!',
      update: 'Report was successfully updated',
      updateLabel: '{reportName} labels have been successfully updated!',
      move: 'Widget was successfully moved.',
    },
    workflow: {
      store: 'Workflow was successfully stored!',
      update: 'Workflow was successfully updated!',
    },
  },
  license: {
    success: 'Juno license was successfully activated',
  },
};
